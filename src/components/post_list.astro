---
import { CollectionEntry, getCollection } from "astro:content";
import FormattedDate from "./formatted_date.astro";

export type Props = {
	maximum?: number;
};

let posts: CollectionEntry<"blog">[] = (await getCollection("blog")).sort(
	({ data: a }, { data: b }) =>
		a.pubDate.getUTCDate() - b.pubDate.getUTCDate()
);

const { maximum } = Astro.props;

if (maximum) {
	posts = posts.slice(0, Math.min(maximum, posts.length));
}
---

<div class="posts-list">
	{
		posts.map(({ slug, data: post }) => {
			return (
				<a class="post-item" href={`/blog/${slug}`}>
					<time class="post-item-date">
						<FormattedDate date={post.pubDate} />
					</time>
					<h3 class="post-item-title">{post.title}</h3>
					<p class="post-item-description">{post.description}</p>
					<!-- FIXME: Add a chevron -->
					<p class="post-item-read-more">Read post</p>
				</a>
			);
		})
	}
</div>

<style is:global>
	.posts-list {
		.post-item {
			display: block;
			color: inherit;
			text-decoration: none;
			margin-block-end: 1rem;
			position: relative;
			margin-inline: -1rem;
			padding: 1rem;
			background-color: transparent;
			transition: background-color 200ms ease-in-out;
			border-radius: 0.5rem;

			&:last-child {
				margin-block-end: 0;
			}

			&:hover {
				background-color: var(--background-secondary);
			}

			.post-item,
			.post-item-date,
			.post-item-description,
			.post-item-read-more {
				z-index: 1;
			}

			.post-item-title {
				font-weight: 600;
				margin-block-end: 0.25rem;
			}

			.post-item-date {
				color: var(--text-tertiary);
			}

			.post-item-description {
				margin-block-end: 0.5rem;
				color: var(--text-secondary);
			}

			.post-item-read-more {
				color: var(--tint-primary);
			}
		}
	}
</style>
