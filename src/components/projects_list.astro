---
import FormattedDate from "$components/formatted_date.astro";
import IconGithub from "$components/icons/github.astro";
import IconLink from "$components/icons/link.astro";
import { CollectionEntry, getCollection } from "astro:content";

export type Project = CollectionEntry<"projects">;

export type Props = {
	filter?: (item: Project) => unknown;
	prioritize?: boolean;
	maximum?: number;
};

let { filter, maximum } = Astro.props;

let projects: Project[] = (await getCollection("projects", filter)).sort(
	({ data: a }, { data: b }) => {
		if (!a.endDate && !b.endDate) {
			return 0;
		} else if (!b.endDate) {
			return 1;
		} else if (!a.endDate) {
			return -1;
		}
		return b.startDate.getTime() - a.startDate.getTime();
	}
);

if (maximum) {
	projects = projects.slice(0, Math.min(maximum, projects.length));
}
---

<div class="projects-list">
	{
		projects.map((project) => {
			return (
				<article class="project-item">
					<div class="project-content">
						<div class="project-info">
							<h3 class="project-title">{project.data.title}</h3>
							<p class="project-headline">
								{project.data.headline}
							</p>
						</div>
						<div class="project-tags">
							{project.data.languages.map((lang) => (
								<div class="project-tag">{lang}</div>
							))}
						</div>
						<div class="project-links">
							<div class="project-date">
								<FormattedDate
									date={project.data.startDate}
									hideDay
								/>{" "}
								-{" "}
								{project.data.endDate ? (
									<FormattedDate
										date={project.data.endDate}
										hideDay
									/>
								) : (
									"Present"
								)}
							</div>
							{project.data.github && (
								<a
									class="project-link"
									href={project.data.github}
									target="_blank"
									title="GitHub Repository"
								>
									<IconGithub />
								</a>
							)}
							{project.data.link && (
								<a
									class="project-link"
									href={project.data.link}
									target="_blank"
									title="Project Link"
								>
									<IconLink />
								</a>
							)}
						</div>
					</div>
				</article>
			);
		})
	}
</div>

<style is:global>
	.projects-list {
		.project-item {
			padding: 0;
			margin-block-end: 2rem;
			color: inherit;
			text-decoration: none;
			display: flex;
			border-radius: 0.5rem;

			.project-date {
				color: var(--text-tertiary);
			}

			.project-links {
				margin-block-start: 0.5rem;
				display: flex;
				align-items: center;

				& > * {
					margin-inline-end: 1rem;
				}

				.project-link {
					& svg {
						width: 1.25rem;
						height: 1.25rem;
						color: var(--text-primary);

						&:hover {
							color: var(--tint-primary);
						}

						@media (prefers-reduced-motion: no-preference) {
							transition: color 0.2s ease-in-out;
						}
					}
				}
			}

			.project-tags {
				margin-block: 0.25rem;
				display: flex;
				align-items: center;

				.project-tag {
					color: var(--tint-primary);
					padding-block: 0.125rem;
					padding-inline: 0.625rem;
					border-radius: 1rem;
					background-color: var(--tint-background);
					border: solid 1.5px var(--tint-secondary);
					font-weight: bold;
					text-transform: uppercase;
					font-size: 0.65rem;
					font-weight: 700;
					margin-inline-end: 0.5rem;
				}
			}

			.project-content {
				flex: 1 1 auto;
			}

			.project-info {
				display: flex;
				align-items: center;

				.project-title {
					font-weight: 500;
					margin-inline-end: 0.5rem;
					font-size: 1.05rem;
				}

				.project-headline {
					color: var(--text-secondary);
				}

				@media (width <= 768px) {
					display: block;
				}
			}
		}
	}
</style>
